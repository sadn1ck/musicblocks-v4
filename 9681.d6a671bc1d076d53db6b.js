"use strict";(self.webpackChunkmusicblocks=self.webpackChunkmusicblocks||[]).push([[9681],{9681:function(t,e,c){c.r(e);var n=c(8785);describe("Music utilities",(function(){describe("Validate stripAccidental",(function(){test("Strip accidental on pitch c and expect pitch c with 0 change in half steps",(function(){expect((0,n.stripAccidental)("c")).toEqual(["c",0])})),test("Strip accidental on pitch gbb and expect pitch g with -2 change in half steps",(function(){expect((0,n.stripAccidental)("gbb")).toEqual(["g",-2])})),test("Strip accidental on pitch cb and expect pitch c with -1 change in half steps",(function(){expect((0,n.stripAccidental)("cb")).toEqual(["c",-1])})),test("Strip accidental on pitch c# and expect pitch c with +1 change in half steps",(function(){expect((0,n.stripAccidental)("c#")).toEqual(["c",1])})),test("Strip accidental on pitch cx and expect pitch c with +2 change in half steps",(function(){expect((0,n.stripAccidental)("cx")).toEqual(["c",2])})),test("Strip accidental on pitch dùÑ´ and expect pitch d with -2 change in half steps",(function(){expect((0,n.stripAccidental)("dùÑ´")).toEqual(["d",-2])})),test("Strip accidental on pitch c‚ô≠ and expect pitch c with -1 change in half steps",(function(){expect((0,n.stripAccidental)("c‚ô≠")).toEqual(["c",-1])})),test("Strip accidental on pitch a‚ôØ and expect pitch a with +1 change in half steps",(function(){expect((0,n.stripAccidental)("a‚ôØ")).toEqual(["a",1])})),test("Strip accidental on pitch cùÑ™ and expect pitch c with +2 change in half steps",(function(){expect((0,n.stripAccidental)("cùÑ™")).toEqual(["c",2])})),test("Strip accidental on pitch b‚ôÆ and expect pitch b with 0 change in half steps",(function(){expect((0,n.stripAccidental)("b‚ôÆ")).toEqual(["b",0])})),test("Strip accidental on pitch c and expect pitch c with 0 change in half steps",(function(){expect((0,n.stripAccidental)("c")).toEqual(["c",0])}))})),describe("Validate normalizePitch",(function(){test("Normalize pitch C‚ô≠ and expect to be cb",(function(){expect((0,n.normalizePitch)("C‚ô≠")).toBe("cb")})),test("Normalize pitch CùÑ™ and expect to be cx",(function(){expect((0,n.normalizePitch)("CùÑ™")).toBe("cx")})),test("Normalize pitch C‚ôØ and expect to be c#",(function(){expect((0,n.normalizePitch)("C‚ôØ")).toBe("c#")})),test("Normalize pitch C‚ôÆ and expect to be c",(function(){expect((0,n.normalizePitch)("C‚ôÆ")).toBe("c")})),test("Normalize pitch CùÑ´ and expect to be cbb",(function(){expect((0,n.normalizePitch)("CùÑ´")).toBe("cbb")}))})),describe("Validate displayPitch",(function(){test("Pretty print cb and expect to be C‚ô≠",(function(){expect((0,n.displayPitch)("cb")).toBe("C‚ô≠")})),test("Pretty print cx and expect to be CùÑ™",(function(){expect((0,n.displayPitch)("cx")).toBe("CùÑ™")})),test("Pretty print d# and expect to be D‚ôØ",(function(){expect((0,n.displayPitch)("d#")).toBe("D‚ôØ")})),test("Pretty print dbb and expect to be DùÑ´",(function(){expect((0,n.displayPitch)("dbb")).toBe("DùÑ´")})),test("Pretty print c and expect to be C",(function(){expect((0,n.displayPitch)("c")).toBe("C")}))})),describe("Validate isASharp",(function(){test("Test c# and expect it to be a sharp pitch",(function(){expect((0,n.isASharp)("c#")).toBe(!0)})),test("Test g and expect it to be a sharp pitch",(function(){expect((0,n.isASharp)("g")).toBe(!0)})),test("Test bb and expect it to not be a sharp pitch",(function(){expect((0,n.isASharp)("bb")).toBe(!1)}))})),describe("Validate findSharpIndex",(function(){test("Generate index of sharp in pitch d# and expect 3",(function(){expect((0,n.findSharpIndex)("d#")).toEqual(3)})),test("Generate index of sharp in pitch c# and expect 1",(function(){expect((0,n.findSharpIndex)("c#")).toEqual(1)})),test("Generate index of sharp in pitch gx and expect 9",(function(){expect((0,n.findSharpIndex)("gx")).toEqual(9)})),test("Generate index of sharp in pitch db and expect a could not find sharp index error",(function(){expect((function(){(0,n.findSharpIndex)("db")})).toThrowError("Could not find sharp index for db")}))})),describe("Validate isAFlat",(function(){test("Test bb and expect it to be a flat pitch",(function(){expect((0,n.isAFlat)("bb")).toBe(!0)})),test("Test g and expect it to be a flat pitch",(function(){expect((0,n.isAFlat)("g")).toBe(!0)})),test("Test c# and expect it to not be a flat pitch",(function(){expect((0,n.isAFlat)("c#")).toBe(!1)})),test("Test a# and expect it to not be a flat pitch",(function(){expect((0,n.isAFlat)("a#")).toBe(!1)}))})),describe("Validate findFlatIndex",(function(){test("Generate index of flat in pitch db and expect 1",(function(){expect((0,n.findFlatIndex)("db")).toBe(1)})),test("Generate index of sharp in pitch bbb and expect 9",(function(){expect((0,n.findFlatIndex)("bbb")).toBe(9)})),test("Generate index of sharp in pitch gbb and expect 5",(function(){expect((0,n.findFlatIndex)("gbb")).toBe(5)})),test("Generate index of sharp in pitch c# and expect a could not find flat index error",(function(){expect((function(){(0,n.findFlatIndex)("c#")})).toThrowError("Could not find flat index for c#")}))})),describe("Validate getPitchType",(function(){test("Generate pitch type of pitch c‚ôØ and expect 'letter name'",(function(){expect((0,n.getPitchType)("c‚ôØ")).toBe("letter name")})),test("Generate pitch type of pitch bb and expect 'letter name'",(function(){expect((0,n.getPitchType)("bb")).toBe("letter name")})),test("Generate pitch type of pitch e# and expect 'letter name'",(function(){expect((0,n.getPitchType)("e#")).toBe("letter name")})),test("Generate pitch type of pitch do and expect 'solfege name'",(function(){expect((0,n.getPitchType)("do")).toBe("solfege name")})),test("Generate pitch type of pitch dha and expect 'east indian solfege name'",(function(){expect((0,n.getPitchType)("dha")).toBe("east indian solfege name")})),test("Generate pitch type of pitch aaa and expect 'unknown'",(function(){expect((0,n.getPitchType)("aaa")).toBe("unknown")})),test("Generate pitch type of pitch 3 and expect 'scalar mode number'",(function(){expect((0,n.getPitchType)("3")).toBe("scalar mode number")})),test("Generate pitch type of pitch n2.3 and expect 'unknown'",(function(){expect((0,n.getPitchType)("n2.3")).toBe("unknown")})),test("Generate pitch type of pitch n2 and expect 'generic note name'",(function(){expect((0,n.getPitchType)("n2")).toBe("generic note name")}))}))}))}}]);